{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formEl","inputtype","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAutheticated","to","className","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignUp","actions","input","inputElement","inputClasses","join","onChange","options","op","displayValue","label"],"mappings":"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","file":"static/js/4.eff35369.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Button from './../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Input from './../../components/UI/Input/Input';\r\nimport * as actions from '../../store/actions/index';\r\nimport './Auth.css'\r\nimport { updateObject, checkValidity } from './../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !==\"/\"){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n\r\n        const updatedControls =updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        })\r\n\r\n        this.setState({\r\n            controls: updatedControls\r\n        })\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup: !prevState.isSignup\r\n            };\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formEl => (\r\n            <Input\r\n                key={formEl.id}\r\n                inputtype={formEl.config.elementType}\r\n                elementConfig={formEl.config.elementConfig}\r\n                value={formEl.config.value}\r\n                invalid={!formEl.config.valid}\r\n                shouldValidate={formEl.config.validation}\r\n                touched={formEl.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formEl.id)} />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if(this.props.error){\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAutheticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className=\"Auth\">\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">Submit</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAutheticated: state.auth.token != null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport \"./Input.css\"\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = ['Input'];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push('Invalid')\r\n    }\r\n\r\n    switch(props.inputtype) {\r\n        case('input'):\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig} \r\n            value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig}\r\n            value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement = (<select \r\n            className={inputClasses.join(' ')}\r\n            value={props.value} onChange={props.changed}>\r\n               {props.elementConfig.options.map(op =>(\r\n                   <option key={op.value} value={op.value}>\r\n                       {op.displayValue}\r\n                   </option>\r\n               ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join('')}\r\n            {...props.elementConfig}\r\n            value={props.value}\r\n            onChange={props.changed}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <label className=\"Label\">{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;\r\n"],"sourceRoot":""}