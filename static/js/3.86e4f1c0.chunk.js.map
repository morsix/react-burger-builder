{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["checkoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCanceled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElId","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputId","updatedFormEl","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formEl","Input","inputtype","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCanceledHandler","history","goBack","checkoutContinuedHandler","replace","query","URLSearchParams","location","search","entries","param","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","join","onChange","op","label"],"mappings":"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","file":"static/js/3.86e4f1c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Burger from './../../Burger/Burger';\r\nimport Button from './../../UI/Button/Button';\r\nimport \"./CheckoutSummary.css\"\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className=\"CheckoutSummary\">\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n                <Burger ingredients={props.ingredients}></Burger>\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCanceled}>Cancel</Button>\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>Continue</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Button from './../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders';\r\n\r\nimport \"./ContactData.css\";\r\n\r\nimport * as actions from '../../../store/actions/index';\r\nimport Spinner from './../../../components/UI/Spinner/Spinner';\r\nimport Input from './../../../components/UI/Input/Input';\r\nimport withErrorHandler from './../../../hoc/withErrorHandler/withErrorHandler';\r\nimport { updateObject, checkValidity } from './../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Post code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' },\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false,\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n\r\n        for (let formElId in this.state.orderForm) {\r\n            formData[formElId] = this.state.orderForm[formElId].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    inputChangedHandler = (event, inputId) => {\r\n\r\n        const updatedFormEl = updateObject(this.state.orderForm[inputId],\r\n            {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.orderForm[inputId].validation),\r\n                touched: true\r\n            })\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputId]: updatedFormEl\r\n        })\r\n\r\n        let formIsValid = true;\r\n\r\n        for (let inputId in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputId].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            orderForm: updatedOrderForm,\r\n            formIsValid: formIsValid\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formEl => (\r\n                    <Input\r\n                        key={formEl.id}\r\n                        inputtype={formEl.config.elementType}\r\n                        elementConfig={formEl.config.elementConfig}\r\n                        value={formEl.config.value}\r\n                        invalid={!formEl.config.valid}\r\n                        shouldValidate={formEl.config.validation}\r\n                        touched={formEl.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formEl.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.orderHandler}> ORDER </Button>\r\n\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className=\"ContactData\">\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from './../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const ingredients = {};\r\n        let price = 0;\r\n        for (let param of query.entries()) {\r\n            if (param[0] === 'price') {\r\n                price = param[1];\r\n            } else {\r\n                ingredients[param[0]] = +param[1];\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            ingredients: ingredients,\r\n            price: price\r\n        }\r\n    }\r\n\r\n    checkoutCanceledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    render() {\r\n\r\n        let summary = <Redirect to='/'></Redirect>\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"></Redirect> :  null;\r\n            summary = <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary\r\n                    ingredients={this.props.ings}\r\n                    checkoutCanceled={this.checkoutCanceledHandler}\r\n                    checkoutContinued={this.checkoutContinuedHandler}>\r\n                </CheckoutSummary>\r\n                <Route\r\n                    path={this.props.match.path + '/contact-data'}\r\n                    component={ContactData}\r\n                ></Route>\r\n            </div>\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n\r\n","import React from 'react';\r\nimport \"./Input.css\"\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = ['Input'];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push('Invalid')\r\n    }\r\n\r\n    switch(props.inputtype) {\r\n        case('input'):\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig} \r\n            value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea \r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig}\r\n            value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement = (<select \r\n            className={inputClasses.join(' ')}\r\n            value={props.value} onChange={props.changed}>\r\n               {props.elementConfig.options.map(op =>(\r\n                   <option key={op.value} value={op.value}>\r\n                       {op.displayValue}\r\n                   </option>\r\n               ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join('')}\r\n            {...props.elementConfig}\r\n            value={props.value}\r\n            onChange={props.changed}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <label className=\"Label\">{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;\r\n"],"sourceRoot":""}